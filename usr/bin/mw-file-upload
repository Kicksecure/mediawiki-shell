#!/usr/bin/env bash

set -euEo pipefail

# shellcheck source=../share/mediawiki-shell/common
source /usr/share/mediawiki-shell/common

usage(){
  printf '%s\n' "Usage: ${0##*/} WIKI INPUT PAGE_FILE [EDIT_MSG]
Defaults:
  EDIT_MSG=${default_edit_msg}
Example:
  ${0##*/} 'https://www.kicksecure.com/w' /tmp/a File:Ubuntu_software_icon.png
  ${0##*/} 'https://www.kicksecure.com/w' /tmp/a File:Ubuntu_software_icon.png 'custom message'" >&2
  exit 1
}

default_edit_msg="mediawiki-shell-bot-default-upload-message"
if [[ -z "${3-}" || "${1-}" =~ (-h|--help) ]]; then
  usage
fi
wiki_url="$1"
origin="$2"
destination="$3"
edit_msg="${4-"${default_edit_msg}"}"

# shellcheck source=../share/mediawiki-shell/wiki-config
WIKI_URL="$wiki_url" source /usr/share/mediawiki-shell/wiki-config

log info "Uploading file '${wiki_url}' '$origin'..."

if test -d "$origin"; then
  log error "origin '$origin' is a folder!"
  exit 1
fi

if ! test -r "$origin"; then
  log error "origin '$origin' is not readable!"
  exit 1
fi

mw-login-test "$wiki_url"

curl_run \
  "${curl_opts[@]}" \
  --cookie "$cookie_jar" \
  --cookie-jar "$cookie_jar" \
  --header "Accept-Language: en-GB" \
  --header "Connection: keep-alive" \
  --compressed \
  --output "${TMPFOLDER}/fetch-edit-token.json" \
  --request "GET" \
  "${WIKI_API}?action=query&meta=tokens&format=json"

csrf_token=$(jq --raw-output '.query.tokens.csrftoken' "${TMPFOLDER}/fetch-edit-token.json")

if [ "${#csrf_token}" = 42 ]; then
  log info "Edit token for file OK."
else
  log error "Edit token for file not set."
  exit 1
fi

curl_run \
  "${curl_opts[@]}" \
  --cookie "$cookie_jar" \
  --cookie-jar "$cookie_jar" \
  --header "Accept-Language: en-GB" \
  --header "Connection: keep-alive" \
  --header "Expect:" \
  --form "token=$csrf_token" \
  --form "filename=$destination" \
  --form "file=@$origin" \
  --form "comment=$edit_msg" \
  --form "ignorewarnings=yes" \
  --output "${TMPFOLDER}/upload-result.json" \
  --request "POST" \
  "${WIKI_API}?action=upload&format=json&tags=mediawiki-shell&bot"

log info "Network for file upload ok."

test -r "${TMPFOLDER}/upload-result.json"

edit_result_output="$(stcat "${TMPFOLDER}/upload-result.json")"
if [ "$(echo "$edit_result_output" | jq -r ".error.code")" = "fileexists-no-change" ]; then
  log info "Upload file success."
  exit 0
fi

edit_result_jq="$(echo "$edit_result_output" | jq -r ".edit.result")"
if [ "$edit_result_jq" = "Success" ]; then
  log info "Upload (edit) file success."
  exit 0
fi

upload_result_jq="$(echo "$edit_result_output" | jq -r ".upload.result")"
if [ "$upload_result_jq" = "Success" ]; then
  log info "Upload (upload) file success."
  exit 0
fi

stecho "${TMPFOLDER}/upload-result.json"
jq . <<<"$edit_result_output" | stcat >&2
log error "Upload file error."
exit 1
